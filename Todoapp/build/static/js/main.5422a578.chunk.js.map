{"version":3,"sources":["components/images/bar.png","firebase.js","components/todoApp.jsx","App.js","reportWebVitals.js","index.js"],"names":["initializeApp","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","db","getFirestore","userCol","collection","validationSchema","yup","todoItems","min","required","id","a","deleteDoc","doc","TodoApp","useState","todo","setTodo","useEffect","q","query","unsubscribe","onSnapshot","snapshot","forEach","data","unshift","console","log","formik","useFormik","initialValues","onSubmit","values","addDoc","docRef","error","Box","sx","flexGrow","AppBar","position","color","Toolbar","IconButton","size","edge","mr","Typography","variant","noWrap","component","display","xs","sm","Avatar","alt","src","bar","Grid","container","item","width","margin","marginTop","className","handleSubmit","Stack","direction","TextField","fullWidth","label","name","value","onChange","handleChange","touched","Boolean","errors","helperText","type","style","fontSize","map","eachUser","i","marginRight","marginLeft","TableContainer","Paper","elevation","Table","TableCell","gutterBottom","onClick","del","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.5422a578.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/bar.fd6d798a.png\";","import { initializeApp } from \"firebase/app\";\r\nimport { getFirestore } from \"firebase/firestore\";\r\nconst firebaseConfig = {\r\n  apiKey: \"AIzaSyC7ylprcCTWJ7tk3Zfo96Qtw1DewIEIwsc\",\r\n  authDomain: \"firestore-todoapp-fe704.firebaseapp.com\",\r\n  projectId: \"firestore-todoapp-fe704\",\r\n  storageBucket: \"firestore-todoapp-fe704.appspot.com\",\r\n  messagingSenderId: \"329344079385\",\r\n  appId: \"1:329344079385:web:6ad3ed7c03014c4e153c88\"\r\n};\r\ninitializeApp(firebaseConfig);\r\nexport const db= getFirestore();","import { useEffect, useState } from 'react';\r\nimport './todo.css';\r\nimport AppBar from '@mui/material/AppBar';\r\nimport Box from '@mui/material/Box';\r\nimport Toolbar from '@mui/material/Toolbar';\r\nimport IconButton from '@mui/material/IconButton';\r\nimport Typography from '@mui/material/Typography';\r\nimport MenuIcon from '@mui/icons-material/Menu';\r\nimport Avatar from '@mui/material/Avatar';\r\nimport Grid from '@mui/material/Grid';\r\nimport bar from './images/bar.png';\r\nimport TextField from '@mui/material/TextField';\r\nimport Stack from '@mui/material/Stack';\r\nimport * as yup from 'yup';\r\nimport { useFormik } from \"formik\";\r\nimport AddCircleIcon from '@mui/icons-material/AddCircle';\r\nimport DeleteForeverIcon from '@mui/icons-material/DeleteForever';\r\nimport { db } from '../firebase';\r\nimport Paper from '@mui/material/Paper';\r\nimport Table from '@mui/material/Table';\r\nimport TableBody from '@mui/material/TableBody';\r\nimport TableCell from '@mui/material/TableCell';\r\nimport TableContainer from '@mui/material/TableContainer';\r\nimport TableHead from '@mui/material/TableHead';\r\nimport TableRow from '@mui/material/TableRow';import { collection, addDoc,doc,deleteDoc , query, updateDoc,deleteField, onSnapshot  } from \"firebase/firestore\";\r\nconst userCol = collection(db, \"todo\")\r\nconst validationSchema = yup.object({\r\n    todoItems: yup\r\n    .string('Enter your Todo Items')\r\n    .min(3, 'Todo Items should be of minimum 3 characters length')\r\n    .required('Todo Items is required'),\r\n});\r\n\r\nasync function del(id) {\r\n  await deleteDoc(doc(userCol, id));\r\n}\r\n// async function deleteAll() {\r\n\r\n// }\r\nexport default function TodoApp(){\r\n    const [todo,setTodo]=useState([]);\r\n    useEffect(() => {\r\n\r\n        const q = query(userCol);\r\n        const unsubscribe = onSnapshot(q, (snapshot) => {\r\n          let todo = [];\r\n          snapshot.forEach((doc) => {\r\n            let data = doc.data();\r\n            let id=doc.id\r\n            todo.unshift(\r\n                {\r\n                    todoItems: data.todoItems,\r\n                    id:id,\r\n                }\r\n            )\r\n          })\r\n          setTodo(todo)\r\n        });\r\n        return () => {\r\n          unsubscribe()\r\n          console.log(\"unsub\")\r\n        };\r\n      }, []);\r\n    const formik = useFormik({\r\n        validationSchema: validationSchema,\r\n        initialValues: {\r\n            todoItems: '',\r\n        },\r\n        onSubmit: async(values)=> {\r\n            try {\r\n              const docRef = await addDoc(userCol, {\r\n                todoItems: values.todoItems,\r\n              });\r\n              console.log(\"Document written with ID: \", docRef.id);\r\n            } catch (e) {\r\n              console.error(\"Error adding document: \", e);\r\n            }\r\n          }\r\n    });\r\n    \r\n    return(\r\n        <>\r\n            <Box sx={{ flexGrow: 1 }}>\r\n                <AppBar position=\"static\" color='secondary'>\r\n                    <Toolbar>\r\n                        <IconButton\r\n                            size=\"large\"\r\n                            edge=\"start\"\r\n                            color=\"inherit\"\r\n                            aria-label=\"open drawer\"\r\n                            sx={{ mr: 2 }}\r\n                        >\r\n                            <MenuIcon />\r\n                        </IconButton>\r\n                        <Typography\r\n                            variant=\"h6\"\r\n                            noWrap\r\n                            component=\"div\"\r\n                            sx={{ flexGrow: 1, display: { xs: 'block', sm: 'block' } }}\r\n                        >\r\n                            Todo App\r\n                        </Typography>\r\n                        <Avatar alt=\"Bariq Siddiqui\" src={bar} />\r\n                    </Toolbar>\r\n                </AppBar>\r\n                <Grid container>\r\n\r\n                    <Grid item sx={{\r\n                                width: '40%',\r\n                                margin: \"auto\",\r\n                                marginTop:\"2%\",\r\n                    }} className='todoWidth'>\r\n                        <form onSubmit={formik.handleSubmit}>\r\n                        <Stack direction=\"row\">\r\n                             <TextField\r\n                                fullWidth\r\n                                color=\"secondary\"\r\n                                id=\"outlined-basic\"\r\n                                label=\"Todo Items\"\r\n                                variant=\"standard\"\r\n\r\n                                name=\"todoItems\"\r\n                                value={formik.values.todoItems}\r\n                                onChange={formik.handleChange}\r\n\r\n                                error={formik.touched.todoItems && Boolean(formik.errors.todoItems)}\r\n                                helperText={formik.touched.todoItems && formik.errors.todoItems}\r\n                            />\r\n                            <IconButton aria-label=\"add\"  type=\"submit\">\r\n                                <AddCircleIcon style={{ fontSize: 50, color:'purple'}}/>\r\n                            </IconButton>\r\n                            {/* <IconButton onClick={()=>{deleteAll()}}>\r\n                                <DeleteForeverIcon style={{ fontSize: 50, color:'red'}}/>\r\n                            </IconButton> */}\r\n                        </Stack>\r\n                         </form>\r\n\r\n                        {todo.map((eachUser, i) => {\r\n\r\n                        return (\r\n                            <Grid key={i} marginRight='15%' marginLeft='2%'>\r\n                            <TableContainer component={Paper} elevation={5}>\r\n                                <Table>\r\n                                    <TableCell width='50%'>\r\n                                        <Typography variant=\"h6\" gutterBottom component=\"div\">\r\n                                            {eachUser.todoItems}\r\n                                        </Typography>\r\n                                    </TableCell>\r\n                                    <TableCell width='15%'>\r\n                                        <IconButton onClick={()=>{del(eachUser.id)}}>\r\n                                            <DeleteForeverIcon style={{ fontSize: 40, color:'red'}}/>\r\n                                        </IconButton>\r\n                                    </TableCell>\r\n                                </Table>\r\n                            </TableContainer>\r\n                            </Grid>   \r\n                            )\r\n                        })}\r\n\r\n                    </Grid>\r\n                </Grid>\r\n            </Box>\r\n        </>\r\n    );\r\n}","// import logo from './logo.svg';\nimport './App.css';\nimport TodoApp from './components/todoApp';\nfunction App() {\n  return (\n    <TodoApp/>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}